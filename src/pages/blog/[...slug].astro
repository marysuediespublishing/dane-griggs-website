---
import { type CollectionEntry, getCollection, render } from 'astro:content';
import BlogPost from '../../layouts/BlogPost.astro';

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	return posts.map((post) => ({
		params: { slug: post.id },
		props: post,
	}));
}
type Props = CollectionEntry<'blog'>;

const post = Astro.props;
const { Content } = await render(post);

// Get all posts sorted chronologically (oldest to newest) for navigation
const allPosts = (await getCollection('blog')).sort(
	(a, b) => a.data.pubDate.valueOf() - b.data.pubDate.valueOf()
);

// Find current post index
const currentIndex = allPosts.findIndex(p => p.id === post.id);

// Determine previous (older) and next (newer) posts
const previousPost = currentIndex > 0 ? allPosts[currentIndex - 1] : null;
const nextPost = currentIndex < allPosts.length - 1 ? allPosts[currentIndex + 1] : null;
---

<BlogPost {...post.data} previousPost={previousPost} nextPost={nextPost}>
	<Content />
</BlogPost>
