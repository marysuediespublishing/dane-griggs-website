---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Header from '../components/Header.astro';
import { ALL_MAPPINGS } from '../utils/book-mappings.ts';

type Props = CollectionEntry<'blog'>['data'] & {
	previousPost?: CollectionEntry<'blog'> | null;
	nextPost?: CollectionEntry<'blog'> | null;
};

const { title, description, pubDate, updatedDate, heroImage, bookSlug, previousPost, nextPost } = Astro.props;

---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
		<style>
			main {
				width: calc(100% - 2em);
				max-width: 100%;
				margin: 0;
			}
			.hero-image {
				width: 100%;
				margin-top: 2rem;
				text-align: center;
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				border-radius: 12px;
				box-shadow: var(--box-shadow);
				max-height: 60vh;
				object-fit: contain;
			}
			.cover-link {
				display: inline-block;
				cursor: pointer;
				line-height: 0;
			}
			.book-link-section {
				text-align: center;
				margin-top: 3rem;
				padding-top: 2rem;
				border-top: 1px solid rgb(var(--gray-light));
			}
			.prose {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 1em;
				color: rgb(var(--gray-dark));
			}
			.title {
				margin-bottom: 1em;
				padding: 1em 0;
				text-align: center;
				line-height: 1;
			}
			.title h1 {
				margin: 0 0 0.5em 0;
			}
			.date {
				margin-bottom: 0.5em;
				color: rgb(var(--gray));
			}
			.last-updated-on {
				font-style: italic;
			}
			
			/* Blog Navigation Styles */
			.blog-navigation {
				background: #ffffff;
				border-top: 1px solid #e5e7eb;
			}
			
			.nav-link-card {
				display: block;
				background: rgba(212, 51, 106, 0.1);
				border: 1px solid rgba(212, 51, 106, 0.2);
				border-radius: 12px;
				padding: 1.5rem;
				text-decoration: none;
				color: #374151;
				transition: all 0.3s ease;
				height: 100%;
			}
			
			.nav-link-card:hover {
				background: rgba(212, 51, 106, 0.15);
				border-color: #d4336a;
				transform: translateY(-2px);
				box-shadow: 0 10px 25px rgba(212, 51, 106, 0.25);
			}
			
			.nav-direction {
				display: flex;
				align-items: center;
				gap: 0.5rem;
				margin-bottom: 0.75rem;
				font-size: 0.875rem;
				color: #6b7280;
				font-weight: 500;
			}
			
			.previous .nav-direction {
				justify-content: flex-end;
				text-align: right;
			}
			
			.nav-arrow {
				font-size: 1rem;
				color: #d4336a;
				font-weight: bold;
			}
			
			.nav-title {
				font-size: 1.125rem;
				font-weight: 600;
				line-height: 1.4;
				margin: 0 0 0.5rem 0;
				color: #111827;
				transition: color 0.3s ease;
			}
			
			.previous .nav-title {
				text-align: right;
			}
			
			.nav-link-card:hover .nav-title {
				color: #d4336a;
			}
			
			.nav-date {
				font-size: 0.875rem;
				color: #6b7280;
				margin: 0;
			}
			
			.previous .nav-date {
				text-align: right;
			}
			
			@media (max-width: 768px) {
				.nav-direction {
					justify-content: center;
				}
				
				.nav-title,
				.nav-date {
					text-align: center !important;
				}
			}
		</style>
	</head>

	<body>
		<Header />
		<main>
			<article>
				<div class="hero-image">
					{heroImage && bookSlug ? (
						<a href={`/books/${bookSlug}`} class="cover-link">
							<Image width={1020} height={510} src={heroImage} alt={`${title} - Click to view book details`} />
						</a>
					) : heroImage && (
						<Image width={1020} height={510} src={heroImage} alt="" />
					)}
				</div>
				<div class="prose">
					<div class="title">
						<div class="date">
							<FormattedDate date={pubDate} />
							{
								updatedDate && (
									<div class="last-updated-on">
										Last updated on <FormattedDate date={updatedDate} />
									</div>
								)
							}
						</div>
						<h1>{title}</h1>
						<hr />
					</div>
					<slot />
				</div>
			</article>
			
			<!-- Blog Post Navigation -->
			{(previousPost || nextPost) && (
				<nav class="blog-navigation">
					<div class="container mx-auto px-4 py-8">
						<div class="max-w-4xl mx-auto">
							<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
								{nextPost && (
									<div class="navigation-item next">
										<a href={`/blog/${nextPost.id}/`} class="nav-link-card group">
											<div class="nav-direction">
												<span class="nav-arrow">←</span>
												<span class="nav-label">Next Post</span>
											</div>
											<h4 class="nav-title">{nextPost.data.title}</h4>
											<p class="nav-date">
												<FormattedDate date={nextPost.data.pubDate} />
											</p>
										</a>
									</div>
								)}
								
								{previousPost && (
									<div class={`navigation-item previous ${!nextPost ? 'md:col-start-2' : ''}`}>
										<a href={`/blog/${previousPost.id}/`} class="nav-link-card group">
											<div class="nav-direction">
												<span class="nav-label">Previous Post</span>
												<span class="nav-arrow">→</span>
											</div>
											<h4 class="nav-title">{previousPost.data.title}</h4>
											<p class="nav-date">
												<FormattedDate date={previousPost.data.pubDate} />
											</p>
										</a>
									</div>
								)}
							</div>
						</div>
					</div>
				</nav>
			)}
		</main>
		<Footer />
		
		<script define:vars={{ mappings: ALL_MAPPINGS }}>
			// Auto-link book and series mentions in blog content
			document.addEventListener('DOMContentLoaded', () => {
				try {
					const proseContent = document.querySelector('.prose');
					if (!proseContent) return;
					
					// Simple approach: find text and replace with links
					function addBookLinks() {
						const textContent = proseContent.innerHTML;
						let newContent = textContent;
						
						// Simple book titles to link (most common ones)
						const simpleLinks = {
							'Marshmallow': '/books/marshmallow-book',
							'War Brides': '/books/war-brides-book',
							'The Bride Program': '/books/the-bride-program-book',
							'Saving Ceraste': '/series#saving-ceraste',
							'Saving Ceraste series': '/series#saving-ceraste'
						};
						
						// Replace each mention with a link (only first occurrence per page)
						for (const [text, url] of Object.entries(simpleLinks)) {
							if (newContent.includes(text) && !newContent.includes(`href="${url}"`)) {
								newContent = newContent.replace(
									new RegExp(`\\b${text.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\b`),
									`<a href="${url}" class="book-series-link">${text}</a>`
								);
							}
						}
						
						proseContent.innerHTML = newContent;
					}
					
					addBookLinks();
				} catch (error) {
					console.log('Auto-linking failed:', error);
				}
			});
		</script>
		
		<style is:global>
			.book-series-link {
				color: var(--color-cosmic-rose);
				text-decoration: underline;
				text-decoration-color: rgba(212, 51, 106, 0.3);
				transition: all 0.2s ease;
				font-weight: 500;
			}
			
			.book-series-link:hover {
				color: #c12d5e;
				text-decoration-color: #c12d5e;
				background-color: rgba(212, 51, 106, 0.05);
				padding: 2px 4px;
				border-radius: 3px;
			}
		</style>
	</body>
</html>
