---
import '../styles/global.css';
import CookieConsentBanner from '../components/CookieConsentBanner.tsx';

export interface Props {
  title: string;
  description?: string;
  image?: string;
  type?: string;
}

const { 
  title, 
  description = "Dane Griggs writes sci-fi romance novels featuring strong heroines and swoon-worthy heroes. Over 44 million pages read with no Mary Sues in sight.",
  image = "/images/og-image.jpg",
  type = "website"
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const socialImageURL = new URL(image, Astro.url);
const measurementId = import.meta.env.PUBLIC_GA_MEASUREMENT_ID;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Favicons -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <meta name="theme-color" content="#1a1a2e" />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={type} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={socialImageURL} />
    <meta property="og:site_name" content="Dane Griggs - Sci-Fi Romance Author" />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={socialImageURL} />
    
    <!-- Additional SEO -->
    <meta name="robots" content="index, follow" />
    <meta name="author" content="Dane Griggs" />
    <meta name="keywords" content="sci-fi romance, alien romance, space romance, fantasy romance, strong heroines, no mary sue, dane griggs" />
    
    <!-- Performance optimizations -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    
    <!-- Google Analytics 4 Preconnect (for performance) -->
    {measurementId && measurementId !== 'G-XXXXXXXXXX' && (
      <>
        <link rel="preconnect" href="https://www.googletagmanager.com" />
        <link rel="preconnect" href="https://www.google-analytics.com" />
      </>
    )}
    
    <title>{title}</title>
  </head>
  <body class="bg-bg-primary text-text-primary min-h-screen antialiased">
    <!-- Skip to main content for accessibility -->
    <a href="#main-content" class="skip-link">
      Skip to main content
    </a>
    
    <slot />
    
    <!-- GDPR Cookie Consent -->
    <CookieConsentBanner client:load />
    
    <!-- Global scripts -->
    <script is:inline>
      // Dark mode detection and handling
      const getThemePreference = () => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      };
      const isDark = getThemePreference() === 'dark';
      document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
      
      if (typeof localStorage !== 'undefined') {
        const observer = new MutationObserver(() => {
          const isDark = document.documentElement.classList.contains('dark');
          localStorage.setItem('theme', isDark ? 'dark' : 'light');
        });
        observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
      }
      
      // Enhanced focus management
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Tab') {
          document.body.classList.add('user-is-tabbing');
        }
      });
      
      document.addEventListener('mousedown', () => {
        document.body.classList.remove('user-is-tabbing');
      });
      
      // Performance monitoring
      if ('performance' in window) {
        window.addEventListener('load', () => {
          const perfData = performance.getEntriesByType('navigation')[0];
          if (perfData && perfData.loadEventEnd > 2500) {
            console.warn('Page load time exceeded 2.5s:', perfData.loadEventEnd + 'ms');
          }
        });
      }
    </script>

    <!-- Initialize Analytics -->
    <script type="module">
      import { initializeAnalytics } from '/src/lib/analytics.ts';
      initializeAnalytics();
    </script>
  </body>
</html>